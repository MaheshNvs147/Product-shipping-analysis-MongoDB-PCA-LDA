show dbs;
db;

use ('ProductOrder')
db;

// 4.Display the first 5 rows of product, inventory, user, and order collection.
use ('ProductOrder')
db.Product.aggregate([
    {$limit: 5}
])

use ('ProductOrder')
db.Inventory.aggregate([
    {$limit: 5}
])

use ('ProductOrder')
db.User.aggregate([
    {$limit: 5}
])

use ('ProductOrder')
db.Order.aggregate([
    {$limit: 5}
])

// 5.Display the Unique Brand and Model names from the Product collection.

use ('ProductOrder')
db.Product.distinct("brand")

use ('ProductOrder')
db.Product.distinct("model")


// 6.Find the maximum and minimum price of the given products.

use ('ProductOrder')
db.Product.aggregate([ 
    { "$group": { 
        "_id": null,
        "max": { "$max": "$price" }, 
        "min": { "$min": "$price" } 
    }}
])


use ('ProductOrder')
db.Product.aggregate([
  { $facet: {
    min: [{ $sort: { price:  1 } }, { $limit: 1 }],
    max: [{ $sort: { price: -1 } }, { $limit: 1 }]
  }},
  { $project: { min: { $first: "$min.price" }, max: { $first: "$max.price" } } }
])

// 7. Display the quantity and last_updated date and time for sku "SNY-11001". 

use ('ProductOrder')
db.Inventory.find( { "sku":'SNY-11001' }, {"quantity": 1,"_id":0} );

use ('ProductOrder')
db.Product.find({"sku" : "SNY-11001"}, {"last_updated": 1,"_id":0});




// 8. List down the count of the total number of users whose role is identified as 'Supplier' from User collection

use ('ProductOrder')
db.User.find( { role:'Supplier' } ).count()

// 9. Display 'sku', 'code', 'price', 'brand' and 'warranty' information for the model 'Bravia-X'

use ('ProductOrder')
db.Product.find({"model" : "Bravia-X"}, {"sku": 1, "code":1,"price":1,"brand":1,"warranty":1,"_id":0});

// 10. Find all the information of Sony products which have an Price greater than 1 lakh 

use ('ProductOrder')
db.Product.find({ $and: [{"brand": "Sony"}, {"price": {$gt: 100000}}]})

// 11. Find the total no of products by each Brand and sort them in descending order.

use ('ProductOrder')
db.Product.aggregate([
	{"$group" : 
		{_id:{brand:"$brand"}, count:{$sum:1}}
	}, 
	{$sort:{"count":-1}}
])

// 12. Find the total no of users by each role, sort them is descending order and save the results in the temporary collection 

use ('ProductOrder')
db.User.aggregate([
	{"$group" : 
		{_id:{role:"$role"}, count:{$sum:1}}
	}, 
	{$sort:{"count":-1}},
    { $out : "result"}
    
])